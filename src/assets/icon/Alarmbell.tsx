import { useState } from 'react';
import styled from 'styled-components';
import { toast } from 'react-toastify';

type Props = {};

function Alarmbell({}: Props) {
  const [onAlarm, setOnAlarm] = useState<boolean>(false);

  const handleAlarmButton = () => {
    if (onAlarm) {
      toast.error('더 이상 알림을 보내지 않습니다.');
    } else {
      toast.success('알림을 받아보실 수 있습니다.');
    }
    setOnAlarm(!onAlarm);
  };
  return (
    <Wrap onClick={handleAlarmButton}>
      {!onAlarm ? (
        <svg width='85%' height='85%' viewBox='0 0 40 40' fill='none' xmlns='http://www.w3.org/2000/svg'>
          <circle cx='19.7371' cy='19.7726' r='19.5943' fill='#00ABF9' />
          <path
            d='M16.9871 28.117C17.7169 28.7 18.6807 29.0545 19.7372 29.0545C20.7937 29.0545 21.7575 28.7 22.4873 28.117M12.0105 25.1169C11.5757 25.1169 11.2241 24.7933 11.4871 24.4137C12.0974 23.5331 12.7952 21.8821 12.7952 20.3268L12.8204 18.0731C12.8204 13.8859 15.9172 10.4915 19.7372 10.4915C23.6135 10.4915 26.7559 13.9359 26.7559 18.1848L26.7307 20.3268C26.7307 21.8928 27.4019 23.5328 27.9874 24.4137C28.2403 24.7942 27.8943 25.1169 27.4649 25.1169H12.0105Z'
            stroke='white'
            strokeWidth='2.06255'
            strokeLinecap='round'
            strokeLinejoin='round'
          />
        </svg>
      ) : (
        <svg xmlns='http://www.w3.org/2000/svg' width='100%' height='100%' viewBox='0 0 54 54' fill='none'>
          <g filter='url(#filter0_d_75_5740)'>
            <circle cx='27' cy='23' r='23' fill='#00ABF9' />
            <path
              d='M19.4706 27.6471L18.773 27.1614H18.773L19.4706 27.6471ZM20.6916 24.1034L19.8416 24.0938V24.1034H20.6916ZM20.7144 22.0643L21.5644 22.0738V22.0643H20.7144ZM34.5294 28.1176L35.2363 27.6457L35.2363 27.6457L34.5294 28.1176ZM33.3575 24.1034L32.5075 24.0933V24.1034H33.3575ZM33.3803 22.1653L34.2303 22.1754V22.1653H33.3803ZM25.0306 30.4865C24.6632 30.1943 24.1285 30.2553 23.8363 30.6227C23.5441 30.9901 23.6051 31.5248 23.9725 31.817L25.0306 30.4865ZM30.0297 31.817C30.3971 31.5248 30.4581 30.9901 30.1659 30.6227C29.8737 30.2553 29.339 30.1943 28.9716 30.4865L30.0297 31.817ZM18.2055 17.0772C18.0387 17.516 18.2592 18.007 18.698 18.1738C19.1368 18.3405 19.6277 18.12 19.7945 17.6812L18.2055 17.0772ZM22.2361 14.739C22.6443 14.5071 22.7872 13.9883 22.5553 13.5801C22.3234 13.1719 21.8045 13.0291 21.3964 13.261L22.2361 14.739ZM32.5919 13.2747C32.1863 13.0384 31.6659 13.1756 31.4295 13.5812C31.1932 13.9868 31.3304 14.5072 31.736 14.7435L32.5919 13.2747ZM34.2024 17.6638C34.3647 18.1043 34.8533 18.3299 35.2938 18.1676C35.7343 18.0053 35.9599 17.5167 35.7976 17.0762L34.2024 17.6638ZM20.1682 28.1327C20.7737 27.263 21.5416 25.7531 21.5416 24.1034H19.8416C19.8416 25.2681 19.2769 26.4376 18.773 27.1614L20.1682 28.1327ZM21.5415 24.1129L21.5644 22.0738L19.8645 22.0548L19.8416 24.0938L21.5415 24.1129ZM35.2363 27.6457C35.0309 27.3379 34.7676 26.7712 34.5554 26.0901C34.3446 25.4135 34.2075 24.6983 34.2075 24.1034H32.5075C32.5075 24.9254 32.6902 25.8187 32.9324 26.5958C33.1731 27.3684 33.4958 28.1003 33.8225 28.5896L35.2363 27.6457ZM34.2074 24.1134L34.2303 22.1754L32.5304 22.1553L32.5075 24.0933L34.2074 24.1134ZM34.2303 22.1653C34.2303 17.9229 31.062 14.3547 27.0011 14.3547V16.0547C29.9865 16.0547 32.5303 18.7192 32.5303 22.1653H34.2303ZM34.0248 29.2873C34.1015 29.2873 34.2275 29.289 34.3319 29.2852C34.4248 29.2818 34.607 29.2726 34.7888 29.2094C34.9861 29.1408 35.3791 28.9268 35.4452 28.4234C35.4941 28.0507 35.3131 27.7606 35.2363 27.6457L33.8225 28.5896C33.8282 28.5981 33.8104 28.574 33.7916 28.5225C33.7733 28.4725 33.7393 28.3569 33.7596 28.2023C33.7823 28.029 33.8645 27.874 33.9811 27.7607C34.0837 27.6608 34.1858 27.6192 34.2305 27.6037C34.3061 27.5774 34.3434 27.5836 34.2693 27.5864C34.2066 27.5887 34.1431 27.5873 34.0248 27.5873V29.2873ZM21.5644 22.0643C21.5644 18.674 24.0668 16.0547 27.0011 16.0547V14.3547C22.9914 14.3547 19.8644 17.8777 19.8644 22.0643H21.5644ZM19.9783 27.5873C20.0923 27.5873 20.1532 27.6406 20.1847 27.686C20.206 27.7166 20.2365 27.7757 20.2419 27.8635C20.2479 27.9605 20.22 28.0583 20.1682 28.1327L18.773 27.1614C18.404 27.6914 18.5291 28.2824 18.7885 28.6559C19.0349 29.0106 19.4691 29.2873 19.9783 29.2873V27.5873ZM34.0248 27.5873H19.9783V29.2873H34.0248V27.5873ZM27.0011 31.15C26.23 31.15 25.5412 30.8925 25.0306 30.4865L23.9725 31.817C24.7886 32.466 25.8517 32.85 27.0011 32.85V31.15ZM28.9716 30.4865C28.461 30.8925 27.7722 31.15 27.0011 31.15V32.85C28.1505 32.85 29.2136 32.466 30.0297 31.817L28.9716 30.4865ZM19.7945 17.6812C20.2793 16.4058 21.139 15.3624 22.2361 14.739L21.3964 13.261C19.9205 14.0994 18.8158 15.4714 18.2055 17.0772L19.7945 17.6812ZM31.736 14.7435C32.8634 15.4004 33.7455 16.4235 34.2024 17.6638L35.7976 17.0762C35.1992 15.4518 34.0481 14.1232 32.5919 13.2747L31.736 14.7435Z'
              fill='white'
            />
          </g>
          <defs>
            <filter id='filter0_d_75_5740' x='0' y='0' width='100%' height='100%' filterUnits='userSpaceOnUse' colorInterpolationFilters='sRGB'>
              <feFlood floodOpacity='0' result='BackgroundImageFix' />
              <feColorMatrix in='SourceAlpha' type='matrix' values='0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0' result='hardAlpha' />
              <feOffset dy='4' />
              <feGaussianBlur stdDeviation='2' />
              <feComposite in2='hardAlpha' operator='out' />
              <feColorMatrix type='matrix' values='0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.25 0' />
              <feBlend mode='normal' in2='BackgroundImageFix' result='effect1_dropShadow_75_5740' />
              <feBlend mode='normal' in='SourceGraphic' in2='effect1_dropShadow_75_5740' result='shape' />
            </filter>
          </defs>
        </svg>
      )}
    </Wrap>
  );
}

export default Alarmbell;

const Wrap = styled.div`
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  z-index: 999;
  width: 36.49px;
  height: 36.49px;
`;
